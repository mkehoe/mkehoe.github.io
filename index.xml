<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>michael kehoe</title>
    <link>https://mkehoe.dev/</link>
    <description>Recent content on michael kehoe</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Thu, 17 Sep 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://mkehoe.dev/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Funky Multiply in C</title>
      <link>https://mkehoe.dev/posts/funky-multiply/</link>
      <pubDate>Thu, 17 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://mkehoe.dev/posts/funky-multiply/</guid>
      <description>A few weeks ago I saw an ingenious way to multiply in C and can&amp;rsquo;t stop thinking about it. If you want to write insane code to trip up a code reviewer up, here is some bizarre code for a multiplication:
int p = sizeof(char[a][b]); There is a couple mildly interesting things about this. First, this will not compile in Visual Studio. Array declarations with non-consts is part of the C99 spec, but VS only supports either C89/C90 or C99 features also defined in the C++ standard.</description>
    </item>
    
    <item>
      <title>Qt Problems</title>
      <link>https://mkehoe.dev/posts/qt-problems/</link>
      <pubDate>Fri, 11 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://mkehoe.dev/posts/qt-problems/</guid>
      <description>Recently I have been working a bunch with Qt and while every framework has is pro&amp;rsquo;s and con&amp;rsquo;s, this week&amp;rsquo;s dealings with it have been particularly frustrating. Qt&amp;rsquo;s strength is that it offers more features than most C++ GUI frameworks, but sometimes it seems that details are overlooked with their implementations. After wasting a ton of time on one of their minor &amp;ldquo;quirks&amp;rdquo; this week, just needed vent on some of their shortcomings.</description>
    </item>
    
    <item>
      <title>Benchmarking Go Platforms for Image Processing</title>
      <link>https://mkehoe.dev/posts/benchmarking-go-platforms-image-processing/</link>
      <pubDate>Tue, 21 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://mkehoe.dev/posts/benchmarking-go-platforms-image-processing/</guid>
      <description>In a previous post, I performed a bunch of benchmarking on .Net Core for different platforms. Since Go is all the rage these days and I haven&amp;rsquo;t had the pleasure of testing it out yet, I decided to extend this benchmarking to an Api built with Go 1.14.
Benchmarks The test setup is exactly the same, a Macbook Pro dual booting Windows and MacOS with both OS&amp;rsquo;s running docker. For this benchmark, the Go Api is designed to match the .</description>
    </item>
    
    <item>
      <title>Word Face Algorithm Using Quadtree&#39;s</title>
      <link>https://mkehoe.dev/posts/word-face-algorithm/</link>
      <pubDate>Thu, 11 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://mkehoe.dev/posts/word-face-algorithm/</guid>
      <description>In another life when I worked for a photobooth company, I was doing a lot of &amp;ldquo;creative coding&amp;rdquo; and one of the more interesting projects I worked on back then involved manipulating words into a portrait of an individual. This is probably the only project I ever agreed to that I had no idea how I was going to complete it. The algorithm wasn&amp;rsquo;t perfect artistically, but it was good enough that we ended up using this for a few marketing campaigns so I thought I would detail it here.</description>
    </item>
    
    <item>
      <title>Benchmarking .Net Core Platforms for Image Processing</title>
      <link>https://mkehoe.dev/posts/benchmarking-net-core-platforms-image-processing/</link>
      <pubDate>Tue, 09 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://mkehoe.dev/posts/benchmarking-net-core-platforms-image-processing/</guid>
      <description>Recently I had to build a CMS that had a web api that handled some image manipulations for the frontend. The project I was working on was already in .Net Core, so with the new cross platform support I wondered about the performance of it.
There are a lot of benchmarks around image resizing. My needs were a little more complicated, so there are 2 benchmarks: resizing and tiling in the context of web api.</description>
    </item>
    
    <item>
      <title>About Michael</title>
      <link>https://mkehoe.dev/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mkehoe.dev/about/</guid>
      <description>I am software generalist with experience in variety of languages and frameworks such as .NET, Qt, WPF, and Vue. Most of my career has been spent working on video, image processing and 3D based technologies.
I&amp;rsquo;ve called CT, Philly, and Orange County California home.</description>
    </item>
    
  </channel>
</rss>